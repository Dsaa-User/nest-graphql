# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PostCountAggregate {
  id: Int!
  title: Int!
  content: Int!
  createdAt: Int!
  updatedAt: Int!
  authorId: Int!
  _all: Int!
}

type PostMaxAggregate {
  id: String
  title: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  authorId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PostMinAggregate {
  id: String
  title: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  authorId: String
}

type Post {
  """The unique ID of the post."""
  id: String!

  """Title of the post."""
  title: String!

  """Content of the post."""
  content: String!

  """Date and time when this post was created."""
  createdAt: DateTime!

  """Date and time when this post was updated."""
  updatedAt: DateTime!
  authorId: String!
  author: User!
}

type UserCountAggregate {
  id: Int!
  email: Int!
  name: Int!
  password: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserCount {
  posts: Int!
}

type UserMaxAggregate {
  id: String
  email: String
  name: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserMinAggregate {
  id: String
  email: String
  name: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
}

type User {
  """The unique ID of the user."""
  id: String!
  email: String!

  """Nama"""
  name: String!
  password: String!

  """Date and time when this user was created."""
  createdAt: DateTime!
  updatedAt: DateTime!
  posts: [Post!]
  _count: UserCount!
}

type Query {
  """Deskripsinya ada disini loh"""
  userFindOne(where: UserWhereUniqueInput!): User
}

input UserWhereUniqueInput {
  id: String
  email: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  name: StringFilter
  password: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  posts: PostListRelationFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  email: StringFilter
  name: StringFilter
  password: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  posts: PostListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: StringFilter
  title: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  authorId: StringFilter
  author: UserRelationFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

type Mutation {
  """Deskripsinya ada disini loh"""
  userCreateOne(data: UserCreateInput!): User
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
}