// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider                              = "node node_modules/prisma-nestjs-graphql"
  output                                = "../src/@generated"
  reExport                              = Single
  fields_Validator_from                 = "class-validator"
  fields_Validator_input                = true
  requireSingleFieldsInWhereUniqueInput = true
  emitSingle                            = true
  emitCompiled                          = true
  purgeOutput                           = true
  noTypeId                              = true
}

model User {
  //----------------------------- scalars -------------------------
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
  /// The unique ID of the user.
  id String @id @default(uuid())

  /// @Validator.IsEmail()
  email String @unique

  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsAlpha()
  /// @Validator.IsNotEmpty()
  ///Nama
  name String

  /// @Validator.MinLength(6)
  /// @Validator.MaxLength(15)
  /// @Validator.IsAlphanumeric()
  password String

  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
  /// Date and time when this user was created.
  createdAt DateTime @default(now())

  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
  updatedAt DateTime @updatedAt

  //-------------------------- m relations --------------------------------

  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
  posts Post[]

  @@map("users")
}

model Post {
  //-----------------------------scalars-------------------------

  /// @HideField({ match: ['PostCreate*Input','PostUpdate*Input']})
  /// The unique ID of the post.
  id String @id @default(uuid())

  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsNotEmpty()
  /// Title of the post.
  title String

  /// @Validator.IsNotEmpty()
  /// Content of the post.
  content String

  /// @HideField({ match: ['PostCreate*Input','PostUpdate*Input']})
  /// Date and time when this post was created.
  createdAt DateTime @default(now())

  /// @HideField({ match: ['PostCreate*Input','PostUpdate*Input']})
  /// Date and time when this post was updated.
  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------
  author User @relation(fields: [authorId], references: [id])

  /// @HideField({ match: ['PostCreate*Input','PostUpdate*Input']})
  authorId String

  @@map("posts")
}
